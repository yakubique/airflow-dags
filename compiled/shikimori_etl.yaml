# PIPELINE DEFINITION
# Name: shikimori-etl
# Description: Extract, transform, and load data from Shikimori
# Inputs:
#    is_testing: bool [Default: True]
components:
  comp-grab-pages:
    executorLabel: exec-grab-pages
    inputDefinitions:
      parameters:
        is_testing:
          parameterType: BOOLEAN
    outputDefinitions:
      artifacts:
        anime_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        manga_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-jsonl-2-pq:
    executorLabel: exec-jsonl-2-pq
    inputDefinitions:
      artifacts:
        json_input_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        pq_output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-jsonl-2-pq-2:
    executorLabel: exec-jsonl-2-pq-2
    inputDefinitions:
      artifacts:
        json_input_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        pq_output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-today-as-s3-key:
    executorLabel: exec-today-as-s3-key
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
  comp-upload-to-s3:
    executorLabel: exec-upload-to-s3
    inputDefinitions:
      artifacts:
        file_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
      parameters:
        bucket_name:
          parameterType: STRING
        key:
          parameterType: LIST
  comp-upload-to-s3-2:
    executorLabel: exec-upload-to-s3-2
    inputDefinitions:
      artifacts:
        file_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
      parameters:
        bucket_name:
          parameterType: STRING
        key:
          parameterType: LIST
deploymentSpec:
  executors:
    exec-grab-pages:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - grab_pages
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'requests==2.32.3'\
          \ 'jsonlines==4.0.0' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef grab_pages(\n    is_testing: bool,\n    anime_path: dsl.OutputPath(\"\
          jsonl\"),\n    manga_path: dsl.OutputPath(\"jsonl\"),\n):\n    page_size\
          \ = 50\n    base_url = \"https://shikimori.one\"\n    base_headers = {\n\
          \        \"Content-Type\": \"application/json\",\n        \"Accept\": \"\
          application/json\",\n        \"User-Agent\": \"Api Test\",\n    }\n\n  \
          \  from dataclasses import dataclass, fields\n\n    @dataclass\n    class\
          \ PoorAnime(object):\n        id: int\n        name: str\n        russian:\
          \ str\n        image: dict\n        url: str\n        kind: str\n      \
          \  score: str\n        status: str\n        episodes: int\n        episodes_aired:\
          \ int\n        aired_on: str\n        released_on: str\n\n        @classmethod\n\
          \        def from_json(cls, data: dict):\n            keys = [f.name for\
          \ f in fields(cls)]\n\n            return cls(**{k: data.get(k) for k in\
          \ keys})\n\n    @dataclass\n    class PoorManga(object):\n        id: int\n\
          \        name: str\n        russian: str\n        image: dict\n        url:\
          \ str\n        kind: str\n        score: str\n        status: str\n    \
          \    volumes: int\n        chapters: int\n        aired_on: str\n      \
          \  released_on: str\n\n        @classmethod\n        def from_json(cls,\
          \ data: dict):\n            keys = [f.name for f in fields(cls)]\n\n   \
          \         return cls(**{k: data.get(k) for k in keys})\n\n    import json\n\
          \n    import requests\n    from requests.adapters import HTTPAdapter, Retry\n\
          \n    def json_get(url: str, headers: dict) -> str:\n        # https://stackoverflow.com/a/35636367\n\
          \        session = requests.Session()\n        retries = Retry(\n      \
          \      total=5, backoff_factor=2, status_forcelist=[429, 500, 502, 503,\
          \ 504]\n        )\n        session.mount(\"https://\", HTTPAdapter(max_retries=retries))\n\
          \n        req = session.get(url, headers=headers)\n\n        if req.status_code\
          \ >= 200 and req.status_code < 400:\n            try:\n                j\
          \ = req.json()\n            except json.JSONDecodeError:\n             \
          \   print(\"Error decoding JSON\", req.text)\n                return None\n\
          \n            return json.dumps(j)\n\n        return None\n\n    import\
          \ jsonlines\n\n    def subprocess(entity: str, EntityClass: object, file_path:\
          \ dsl.InputPath(\"jsonl\")):\n        start_url = f\"{base_url}/api/{entity}?order=id&limit=1&page=0\"\
          \n        end_url = f\"{base_url}/api/{entity}?order=id_desc&limit=1&page=0\"\
          \n\n        start_data = json_get(start_url, base_headers)\n        end_data\
          \ = json_get(end_url, base_headers)\n\n        start_anime = EntityClass.from_json(json.loads(start_data)[0])\n\
          \        end_anime = EntityClass.from_json(json.loads(end_data)[0])\n\n\
          \        to_go = end_anime.id - start_anime.id\n        pages = to_go //\
          \ page_size + 1\n\n        if is_testing:\n            pages = 10\n\n  \
          \      with jsonlines.open(file_path, \"w\") as writer:\n            for\
          \ i in range(pages):\n                page_url = (\n                   \
          \ f\"{base_url}/api/{entity}?order=id&limit={page_size}&page={i}\"\n   \
          \             )\n                print(f\"Getting {entity} page\", i, \"\
          of\", pages)\n\n                page_data = json_get(page_url, base_headers)\n\
          \                page_json = json.loads(page_data)\n\n                for\
          \ anime in page_json:\n                    writer.write(anime)\n\n    subprocess(\"\
          animes\", PoorAnime, anime_path)\n    subprocess(\"mangas\", PoorManga,\
          \ manga_path)\n\n"
        image: python:3.11
    exec-jsonl-2-pq:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - jsonl_2_pq
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'duckdb==1.1.3'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef jsonl_2_pq(\n    json_input_path: dsl.InputPath(\"jsonl\"), pq_output_path:\
          \ dsl.OutputPath(\"parquet\")\n):\n    \"\"\"\n    Converts a JSONL file\
          \ to a Parquet file.\n    \"\"\"\n    import duckdb  # pylint: disable=import-error,import-outside-toplevel\n\
          \n    duckdb.read_json(json_input_path)\n    duckdb.sql(\n        f\"\"\"\
          \n            SELECT *\n            FROM read_ndjson_auto('{json_input_path}',\
          \ format = 'newline_delimited')\n        \"\"\"\n    ).write_parquet(pq_output_path)\n\
          \n"
        image: python:3.11
    exec-jsonl-2-pq-2:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - jsonl_2_pq
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'duckdb==1.1.3'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef jsonl_2_pq(\n    json_input_path: dsl.InputPath(\"jsonl\"), pq_output_path:\
          \ dsl.OutputPath(\"parquet\")\n):\n    \"\"\"\n    Converts a JSONL file\
          \ to a Parquet file.\n    \"\"\"\n    import duckdb  # pylint: disable=import-error,import-outside-toplevel\n\
          \n    duckdb.read_json(json_input_path)\n    duckdb.sql(\n        f\"\"\"\
          \n            SELECT *\n            FROM read_ndjson_auto('{json_input_path}',\
          \ format = 'newline_delimited')\n        \"\"\"\n    ).write_parquet(pq_output_path)\n\
          \n"
        image: python:3.11
    exec-today-as-s3-key:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - today_as_s3_key
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef today_as_s3_key() -> str:\n    \"\"\"\n    Returns the current\
          \ date in the format of `year=%Y/month=%m/day=%d`.\n    \"\"\"\n    from\
          \ datetime import datetime  # pylint: disable=import-outside-toplevel\n\n\
          \    return datetime.now().strftime(\"year=%Y/month=%m/day=%d\")\n\n"
        image: python:3.11
    exec-upload-to-s3:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_to_s3
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'boto3==1.35.86'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_to_s3(\n    file_path: dsl.InputPath(\"file\"),\n    bucket_name:\
          \ str,\n    key: List[str],\n):\n    s3_key_id = \"ScoVfeV1Q1lc1X7Bc8hK\"\
          \n    s3_access_key = \"mHvUJ7GterdyuKwBcqebaMftn9h7cJjxwyHMm0U5\"\n   \
          \ s3_endpoint = \"https://minio-api.local.opa-oz.live\"\n    import boto3\n\
          \n    if not key[0].startswith(\"/\"):\n        key[0] = f\"/{key}\"\n \
          \       print(\"Someone forgot to add a leading slash to the key\")\n\n\
          \    client = boto3.client(\n        \"s3\",\n        aws_access_key_id=s3_key_id,\n\
          \        aws_secret_access_key=s3_access_key,\n        endpoint_url=s3_endpoint,\n\
          \    )\n\n    print(f\"Uploading {file_path} to s3://{bucket_name}/{key}\"\
          )\n    client.upload_file(file_path, bucket_name, \"/\".join(key))\n\n"
        image: python:3.11
    exec-upload-to-s3-2:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_to_s3
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'boto3==1.35.86'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_to_s3(\n    file_path: dsl.InputPath(\"file\"),\n    bucket_name:\
          \ str,\n    key: List[str],\n):\n    s3_key_id = \"ScoVfeV1Q1lc1X7Bc8hK\"\
          \n    s3_access_key = \"mHvUJ7GterdyuKwBcqebaMftn9h7cJjxwyHMm0U5\"\n   \
          \ s3_endpoint = \"https://minio-api.local.opa-oz.live\"\n    import boto3\n\
          \n    if not key[0].startswith(\"/\"):\n        key[0] = f\"/{key}\"\n \
          \       print(\"Someone forgot to add a leading slash to the key\")\n\n\
          \    client = boto3.client(\n        \"s3\",\n        aws_access_key_id=s3_key_id,\n\
          \        aws_secret_access_key=s3_access_key,\n        endpoint_url=s3_endpoint,\n\
          \    )\n\n    print(f\"Uploading {file_path} to s3://{bucket_name}/{key}\"\
          )\n    client.upload_file(file_path, bucket_name, \"/\".join(key))\n\n"
        image: python:3.11
pipelineInfo:
  description: Extract, transform, and load data from Shikimori
  displayName: Shikimori ETL
  name: shikimori-etl
root:
  dag:
    tasks:
      grab-pages:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-grab-pages
        inputs:
          parameters:
            is_testing:
              componentInputParameter: is_testing
        taskInfo:
          name: grab-pages
      jsonl-2-pq:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-jsonl-2-pq
        dependentTasks:
        - grab-pages
        inputs:
          artifacts:
            json_input_path:
              taskOutputArtifact:
                outputArtifactKey: anime_path
                producerTask: grab-pages
        taskInfo:
          name: jsonl-2-pq
      jsonl-2-pq-2:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-jsonl-2-pq-2
        dependentTasks:
        - grab-pages
        inputs:
          artifacts:
            json_input_path:
              taskOutputArtifact:
                outputArtifactKey: manga_path
                producerTask: grab-pages
        taskInfo:
          name: jsonl-2-pq-2
      today-as-s3-key:
        cachingOptions: {}
        componentRef:
          name: comp-today-as-s3-key
        taskInfo:
          name: today-as-s3-key
      upload-to-s3:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-upload-to-s3
        dependentTasks:
        - jsonl-2-pq
        - today-as-s3-key
        inputs:
          artifacts:
            file_path:
              taskOutputArtifact:
                outputArtifactKey: pq_output_path
                producerTask: jsonl-2-pq
          parameters:
            bucket_name:
              runtimeValue:
                constant: shikimori
            key:
              runtimeValue:
                constant:
                - /poor/anime
                - '{{$.inputs.parameters[''pipelinechannel--today-as-s3-key-Output'']}}'
                - 98b97f3a.parquet
            pipelinechannel--today-as-s3-key-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: today-as-s3-key
        taskInfo:
          name: upload-to-s3
      upload-to-s3-2:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-upload-to-s3-2
        dependentTasks:
        - jsonl-2-pq-2
        - today-as-s3-key
        inputs:
          artifacts:
            file_path:
              taskOutputArtifact:
                outputArtifactKey: pq_output_path
                producerTask: jsonl-2-pq-2
          parameters:
            bucket_name:
              runtimeValue:
                constant: shikimori
            key:
              runtimeValue:
                constant:
                - /poor/manga
                - '{{$.inputs.parameters[''pipelinechannel--today-as-s3-key-Output'']}}'
                - 98b97f3a.parquet
            pipelinechannel--today-as-s3-key-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: today-as-s3-key
        taskInfo:
          name: upload-to-s3-2
  inputDefinitions:
    parameters:
      is_testing:
        defaultValue: true
        isOptional: true
        parameterType: BOOLEAN
schemaVersion: 2.1.0
sdkVersion: kfp-2.11.0
